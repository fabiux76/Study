{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"","title":"About"},{"location":"done/","text":"Aggiunto github action per la creazione automatica della documentazione sui commit su master","title":"Done"},{"location":"todo/","text":"Personal Access Token di GitHub. Trovare modo di salvarlo nella cache senza doverlo reinserire ogni volta e senza sputtanare allo stesso tempo l'accesso a BitBucket Manning Live Projects Serverless Lambda: Creating a WhatsApp Notification Service Using AWS Lambda and a Serverless Framework Terraform: Automating Infrastructure for an E-commerce Website with Terraform and AWS Kubernetes: Creating and Managing Cloud Native Services in Kubernetes Courses replay Micreoservices with Node.js by Stephen Grider Topics Cognito, come usarlo effettivamente Make github action (?) that once master is updated automatically generates the site Interessante per questo dare un'occhiata a questi link: istruzioni per farlo Github action gi\u00e0 fatta Create lambda with typescript Github actions Steps to start a new typescript project. Of different types. Taking info from book, official documentation, and grider courses","title":"Todo"},{"location":"todo/#personal-access-token-di-github","text":"Trovare modo di salvarlo nella cache senza doverlo reinserire ogni volta e senza sputtanare allo stesso tempo l'accesso a BitBucket","title":"Personal Access Token di GitHub."},{"location":"todo/#manning-live-projects","text":"Serverless Lambda: Creating a WhatsApp Notification Service Using AWS Lambda and a Serverless Framework Terraform: Automating Infrastructure for an E-commerce Website with Terraform and AWS Kubernetes: Creating and Managing Cloud Native Services in Kubernetes","title":"Manning Live Projects"},{"location":"todo/#courses-replay","text":"Micreoservices with Node.js by Stephen Grider","title":"Courses replay"},{"location":"todo/#topics","text":"Cognito, come usarlo effettivamente Make github action (?) that once master is updated automatically generates the site Interessante per questo dare un'occhiata a questi link: istruzioni per farlo Github action gi\u00e0 fatta Create lambda with typescript Github actions Steps to start a new typescript project. Of different types. Taking info from book, official documentation, and grider courses","title":"Topics"},{"location":"Github/github_actions/","text":"Adding Github action to automatically generate documentation Commit And Intructions","title":"Github"},{"location":"Github/github_actions/#adding-github-action-to-automatically-generate-documentation","text":"Commit And Intructions","title":"Adding Github action to automatically generate documentation"},{"location":"Serverless/altri_serverless_plugin/","text":"Ancora da valutare: serverless-dynamodb-local serverless-step-functions-offline serverless-s3-local serverless-webpack (alternativa al plugin typescript, quando i progetti cominciano ad essere un po' grandi) serverless-iam-roles-per-function Altri qui","title":"Altri serverless plugin"},{"location":"Serverless/amplify/","text":"Provare a seguire questo https://www.youtube.com/playlist?list=PLGyRwGktEFqfquTNg6u82-m0u45qZUQpL","title":"Amplify"},{"location":"Serverless/appsynch/","text":"","title":"Appsynch"},{"location":"Serverless/aws-cognito/","text":"I concetti UserPool User pools are user directories that provide sign-up and sign-in options for your app users A user pool is a user directory in Amazon Cognito. Your app users can sign in either directly through a user pool, or federate through a third-party identity provider (IdP). The user pool manages the overhead of handling the tokens that are returned from social sign-in through Facebook, Google, Amazon, and Apple, and from OpenID Connect (OIDC) and SAML IdPs. Whether your users sign in directly or through a third party, all members of the user pool have a directory profile that you can access through an SDK. UserPoolClient After you create a user pool, you can create an app to use the built-in webpages for signing up and signing in your users. IdentityPool Identity pools enable you to grant your users access to other AWS services With an identity pool, your users can obtain temporary AWS credentials to access AWS services, such as Amazon S3 and DynamoDB. Identity pools support anonymous guest users, as well as federation through third-party IdPs. Questi hanno tra le propriet\u00e0, i CognitoIdentityProviders che possono essere tra gli altri un UserPoolClient Possibili scenari C'\u00e8 proprio una pagina AWS Common Amazon Cognito scenarios BELLISSIMA! E' Proprio quella che cercavo This topic describes six common scenarios for using Amazon Cognito. !!! Da qui capisco anche il discorso del Amazon Cognito authorizer Lambda function, che secondo me \u00e8 da usare se nella richiesta c'\u00e8 il token dello user pool, mentre se si passa dall'identity pool, allora in quel caso nella richiesta ci saranno le credenziali AWS quindi bisogna usare AWS authorizer Miei progettini esempio Foobar 2018 Rifatto progettino secondo questi due video di foobar: - Parte backend - Parte frontend Qui il mio repo Cosa ricordare di questo: L'obiettivo di questo progetto \u00e8 definire uno UserPool + IdentityPool, pi\u00f9 un'endpoint ApiGateway protetto Parte backend sviluppato con serverless Le risorsce (cloudformation) definite sono UserPool UserPoolClient IdentityPool (che come CognitoIdentityProviders ha il CognitorUserPool + CognitoUserPoolClient ) Ruoli per utenti autenticati e non autenticati + Attach di tali ruoli al IdentityPool Il ruole per gli utenti loggati indica che possono fare la chiamata all'api: ```yaml Effect: \"Allow\" Action: \"execute-api:Invoke\" Resource: \"*\" ``` Per l'ApiGateway create come evento della lambda vengono specificati questi valori: yaml functions: hello: handler: handler.hello events: - http: path: hello method: get cors: true authorizer: aws_iam In particolare si specifica che l' authorzer deve essere aws_iam La parte client \u00e8 fatta in React (quindi \u00e8 un'app creata con create-react-app ) e su questa poi \u00e8 stato installato il pacakge aws-amplify Per fare andare amplify con la versione del codice illustrata, ho dovuto installare una versione molto vecchia ( 0.3.3 ) mentre la latest che sarebbe stata installata ( 4 ) Nell'applicazione client viene fatta questa chiamata fondamentale: javascript Amplify.configure({ Auth: { mandatorySignIn: true, region: config.cognito.REGION, userPoolId: config.cognito.USER_POOL_ID, identityPoolId: config.cognito.IDENTITY_POOL_ID, userPoolWebClientId: config.cognito.APP_CLIENT_ID }, API: { endpoints: [ { name: 'testApiCall', endpoint: config.apiGateway.URL, region: config.apiGateway.REGION } ] } }); Dopo aver configurato questi parametri poi \u00e8 possibile usare la libreria amplify per fare cose come: javascript await Auth.signIn(this.state.email, this.state.password); javascript const newUser = await Auth.signUp({ username: this.state.email, password: this.state.password }); javascript await Auth.confirmSignUp(this.state.email, this.state.confirmationCode); javascript API.get('testApiCall', '/hello'); Tutte le chiamate relative ad Auth usano evidentemente la configurazione settata prima. Per quanto riguarla la chiamata all'API, evidentemente si intende debba essere autenticata con la modalit\u00e0 specificata, in questo caso con il token AWS ottenuto dell'identityPool viene inserito negli header della richiesta Cose che non mi sono chiare di questo progetto Nella definizione dell' IdentityPool , specifichiamo questa propriet\u00e0: AllowUnauthenticatedIdentities: false , per\u00f2 poi definiamo anche i ruoli per gli utenti non autenticati... Capire bene i collegamenti Comandi utili Creazioen utente \u03bb aws cognito-idp sign-up --region us-east-1 --client-id 5i9htq9ejfe2d9qkhk2ec9ohkt --username admin@example.com --password Passw0rd! Output: { \"UserConfirmed\": false, \"UserSub\": \"7444c0c9-5ec1-43ba-a011-37f12c5a8d3c\" } L'utente va poi confermato da console TODO: Collegare google\\facebook Discorse dell'AWS autenticator per api gateway... come si intreccia? Secondo m","title":"I concetti"},{"location":"Serverless/aws-cognito/#i-concetti","text":"","title":"I concetti"},{"location":"Serverless/aws-cognito/#userpool","text":"User pools are user directories that provide sign-up and sign-in options for your app users A user pool is a user directory in Amazon Cognito. Your app users can sign in either directly through a user pool, or federate through a third-party identity provider (IdP). The user pool manages the overhead of handling the tokens that are returned from social sign-in through Facebook, Google, Amazon, and Apple, and from OpenID Connect (OIDC) and SAML IdPs. Whether your users sign in directly or through a third party, all members of the user pool have a directory profile that you can access through an SDK.","title":"UserPool"},{"location":"Serverless/aws-cognito/#userpoolclient","text":"After you create a user pool, you can create an app to use the built-in webpages for signing up and signing in your users.","title":"UserPoolClient"},{"location":"Serverless/aws-cognito/#identitypool","text":"Identity pools enable you to grant your users access to other AWS services With an identity pool, your users can obtain temporary AWS credentials to access AWS services, such as Amazon S3 and DynamoDB. Identity pools support anonymous guest users, as well as federation through third-party IdPs. Questi hanno tra le propriet\u00e0, i CognitoIdentityProviders che possono essere tra gli altri un UserPoolClient","title":"IdentityPool"},{"location":"Serverless/aws-cognito/#possibili-scenari","text":"C'\u00e8 proprio una pagina AWS Common Amazon Cognito scenarios BELLISSIMA! E' Proprio quella che cercavo This topic describes six common scenarios for using Amazon Cognito. !!! Da qui capisco anche il discorso del Amazon Cognito authorizer Lambda function, che secondo me \u00e8 da usare se nella richiesta c'\u00e8 il token dello user pool, mentre se si passa dall'identity pool, allora in quel caso nella richiesta ci saranno le credenziali AWS quindi bisogna usare AWS authorizer","title":"Possibili scenari"},{"location":"Serverless/aws-cognito/#miei-progettini-esempio","text":"","title":"Miei progettini esempio"},{"location":"Serverless/aws-cognito/#foobar-2018","text":"Rifatto progettino secondo questi due video di foobar: - Parte backend - Parte frontend Qui il mio repo Cosa ricordare di questo: L'obiettivo di questo progetto \u00e8 definire uno UserPool + IdentityPool, pi\u00f9 un'endpoint ApiGateway protetto Parte backend sviluppato con serverless Le risorsce (cloudformation) definite sono UserPool UserPoolClient IdentityPool (che come CognitoIdentityProviders ha il CognitorUserPool + CognitoUserPoolClient ) Ruoli per utenti autenticati e non autenticati + Attach di tali ruoli al IdentityPool Il ruole per gli utenti loggati indica che possono fare la chiamata all'api: ```yaml Effect: \"Allow\" Action: \"execute-api:Invoke\" Resource: \"*\" ``` Per l'ApiGateway create come evento della lambda vengono specificati questi valori: yaml functions: hello: handler: handler.hello events: - http: path: hello method: get cors: true authorizer: aws_iam In particolare si specifica che l' authorzer deve essere aws_iam La parte client \u00e8 fatta in React (quindi \u00e8 un'app creata con create-react-app ) e su questa poi \u00e8 stato installato il pacakge aws-amplify Per fare andare amplify con la versione del codice illustrata, ho dovuto installare una versione molto vecchia ( 0.3.3 ) mentre la latest che sarebbe stata installata ( 4 ) Nell'applicazione client viene fatta questa chiamata fondamentale: javascript Amplify.configure({ Auth: { mandatorySignIn: true, region: config.cognito.REGION, userPoolId: config.cognito.USER_POOL_ID, identityPoolId: config.cognito.IDENTITY_POOL_ID, userPoolWebClientId: config.cognito.APP_CLIENT_ID }, API: { endpoints: [ { name: 'testApiCall', endpoint: config.apiGateway.URL, region: config.apiGateway.REGION } ] } }); Dopo aver configurato questi parametri poi \u00e8 possibile usare la libreria amplify per fare cose come: javascript await Auth.signIn(this.state.email, this.state.password); javascript const newUser = await Auth.signUp({ username: this.state.email, password: this.state.password }); javascript await Auth.confirmSignUp(this.state.email, this.state.confirmationCode); javascript API.get('testApiCall', '/hello'); Tutte le chiamate relative ad Auth usano evidentemente la configurazione settata prima. Per quanto riguarla la chiamata all'API, evidentemente si intende debba essere autenticata con la modalit\u00e0 specificata, in questo caso con il token AWS ottenuto dell'identityPool viene inserito negli header della richiesta","title":"Foobar 2018"},{"location":"Serverless/aws-cognito/#cose-che-non-mi-sono-chiare-di-questo-progetto","text":"Nella definizione dell' IdentityPool , specifichiamo questa propriet\u00e0: AllowUnauthenticatedIdentities: false , per\u00f2 poi definiamo anche i ruoli per gli utenti non autenticati... Capire bene i collegamenti","title":"Cose che non mi sono chiare di questo progetto"},{"location":"Serverless/aws-cognito/#comandi-utili","text":"","title":"Comandi utili"},{"location":"Serverless/aws-cognito/#creazioen-utente","text":"\u03bb aws cognito-idp sign-up --region us-east-1 --client-id 5i9htq9ejfe2d9qkhk2ec9ohkt --username admin@example.com --password Passw0rd! Output: { \"UserConfirmed\": false, \"UserSub\": \"7444c0c9-5ec1-43ba-a011-37f12c5a8d3c\" } L'utente va poi confermato da console","title":"Creazioen utente"},{"location":"Serverless/aws-cognito/#todo","text":"Collegare google\\facebook Discorse dell'AWS autenticator per api gateway... come si intreccia? Secondo m","title":"TODO:"},{"location":"Serverless/aws-x-ray/","text":"Interessante Questo video In generale altri di questa","title":"Aws x ray"},{"location":"Serverless/esempio_besharp/","text":"Repo Faccio riferimento a questo repo Qui invece l'articolo in cui lo presentano Cose interessanti docker-compose docker-compose usato per far partire un'istanza locale di postgres per i test in locale strumenti\\librerie utilizzate express . La lamda \u00e8 in realt\u00e0 un'istanza di express, quindi la stessa lambda in realt\u00e0 serve molte rotte, a differenza della soluzione del liveproject in cui ogni lambda era per una rotta separata) tsoa . PEr fare documentazione swagger e definire rotte... (?) sequelize . Dovrebbe essere un ORM serverless-offline . Per fare test in locale serverless-http . Questo secondo me \u00e8 quello che ci fa collegare il mondo lambda al mondo express uso dei labmda layers comandi di script \"scripts\": { \"generate-swagger\": \"./node_modules/tsoa/dist/cli.js swagger\", \"generate-routes\": \"./node_modules/tsoa/dist/cli.js routes\", \"build\": \"./node_modules/typescript/bin/tsc\", \"prebuild\": \"npm run generate-routes && ./node_modules/tslint/bin/tslint -c tslint.json -p tsconfig.json --fix && rm -rf dist/\", \"prestart\": \"npm install && npm run build\", \"start\": \"isLocal=true NODE_ENV=dev sls offline start\", \"pre-deploy\": \"rm -rf node_modules .serverless && npm install --production && npm run build && ./prepare-layer.sh\", \"deploy-dev\": \"npm run pre-deploy && NODE_ENV=dev sls deploy\", \"migrate-db-local\": \"NODE_ENV=local ./node_modules/sequelize-cli/lib/sequelize db:migrate\", \"migrate-db-dev\": \"NODE_ENV=dev ./node_modules/sequelize-cli/lib/sequelize db:migrate\" }, Interessante: - il build fa la compilazione del typescript in javascript. Prima per\u00f2 il prebuild fa diverse cose : - ./node_modules/tsoa/dist/cli.js routes - ./node_modules/tslint/bin/tslint -c tslint.json -p tsconfig.json --fix - rm -rf dist/ - lo start e prestart servono per fare il deploy in locale. - installazione dei pacchetti: npm install - step di build: npm run build - start del plugin sls offline: isLocal=true NODE_ENV=dev sls offline start - il pre-deploy e deploy-dev fanno invece il deploy su ambiente dev. Fondamente fanno: - clean = rm -rf node_modules .serverless - installazione dei pacchetti di produzione = npm install --production - step di build: npm run build - Preparazione del layer: ./prepare-layer.sh - deploy vero e proprio serverless: NODE_ENV=dev sls deploy Quindi secondo me, per fare il deploy. In locale: - docker-compose up - npm run migrate-db-local - npm run start PEr depolyare su ambiente dev: - npm run deploy-dev Poi per\u00f2 devo fare - npm run migrate-db-dev da una macchina (Bastion host??? ma non ho cpaito come pu\u00f2 funzionare... , sul bastion host mica c'\u00e8 quel codice...) tsoa tsoa , ovvero OpenAPI-compliant REST APIs using TypeScript and Node \u00e8 qui tsoa is a framework with integrated OpenAPI compiler to build Node.js serve-side applications using TypeScript. It can target express, hapi, koa and more frameworks at runtime. tsoa applications are type-safe by default and handle runtime validation seamlessly Fondamentalmente possiamo interpretare questo progetto di besharp come: - progetto di rest tsoa basato su express - che per lo storage dei dati usa postgress attraverso la libreria sequelize - invece che essere esposto come server a se stante usa serverless per essere deployato come lambda, e serverless-http come strumento per linkare il modello di invocazione delle lambda a quello di express - usa serverless-offline per permettere di fare i test in locale Nel progetto vengono usati questi due comandi rispettivamente per la generazione della codumentazione swagger ed il codice delle rotte: \"generate-swagger\": \"./node_modules/tsoa/dist/cli.js swagger\", \"generate-routes\": \"./node_modules/tsoa/dist/cli.js routes\", Mentre nella documentazione di tsoa vengono usati questi: # generate OAS tsoa spec # generate routes tsoa routes Forse loro usavano una versione un po' vecchia Approfondisco questo tema molto interessante qui serverless-offline Qui il link . \u00c8 un plugin. This Serverless plugin emulates AWS \u03bb and API Gateway on your local machine to speed up your development cycles. To do so, it starts an HTTP server that handles the request's lifecycle like APIG does and invokes your handlers. Approfondisco qui Layers Usano questo approccio package: exclude: - node_modules/** - src/** layers: nodeModules: path: layer compatibleRuntimes: - nodejs12.x Cio\u00e8 tutte le dipendenze node le sposta nella directory layer .... Ma questo secondo me non \u00e8 il corretto uso prepare-layer.sh fa questo: mkdir -p layer/nodejs cp -r ./node_modules ./layer/nodejs cp package.json ./layer/nodejs NElla docuemntazione scrivono: Con questa configurazione, infatti, andremo a creare un Lambda Layer contenente tutti i node modules. Cos\u00ec facendo, alleggeriremo notevolmente le dimensioni della nostra funzione ottenendo vantaggi in performance durante la sua esecuzione. Quindi comq forse ha senso valutare... Sicoome \u00e8 stta fatta una lambda con express forse effettivamente \u00e8 un po' ciccia serverless-http This module allows you to 'wrap' your API for serverless use. No HTTP server, no ports or sockets. Just your code in the same execution pipeline you are already familiar with. AWS Secret Manager Usa secret manager pee recuperare le credenziali di accesso al DB PROVA PRovo a vedere se effettivamente funziona e cosa bisogna cambiare Steps: 1 npm install 2 npm run build fallisce su pc per discorso di percorsi, ma funziona su mac. Continuo le prove su mac 3 docker-compose up 4 npm run migrate-db-local 5 npm run start (che poi in realt\u00e0 i primi 2 step) E funziona. Riesco a fare la chiamata con postman in locale ! (verificare se riesco anche a fare il debug locale!!!!) 6 npm run deploy-dev . Cio\u00e8, provo fare deploy su aws. Fa effettivamente un sacco di pasaggi come il caricamento dei zip sia per lambda che per i layer, ma poi fallisce perch\u00e8 nel file yaml \u00e8 specificato vpc esplicito Dopo aver corretto vpc e subnet, mettendo quelle del mio account sono effettivamente riuscito a fare il deploy. Qui i dettagli della lambda deployata. Effettivamente c'\u00e8 un layer, doe sono i node_modules (che non sono nl codice della lambda)","title":"Repo"},{"location":"Serverless/esempio_besharp/#repo","text":"Faccio riferimento a questo repo Qui invece l'articolo in cui lo presentano Cose interessanti","title":"Repo"},{"location":"Serverless/esempio_besharp/#docker-compose","text":"docker-compose usato per far partire un'istanza locale di postgres per i test in locale","title":"docker-compose"},{"location":"Serverless/esempio_besharp/#strumentilibrerie-utilizzate","text":"express . La lamda \u00e8 in realt\u00e0 un'istanza di express, quindi la stessa lambda in realt\u00e0 serve molte rotte, a differenza della soluzione del liveproject in cui ogni lambda era per una rotta separata) tsoa . PEr fare documentazione swagger e definire rotte... (?) sequelize . Dovrebbe essere un ORM serverless-offline . Per fare test in locale serverless-http . Questo secondo me \u00e8 quello che ci fa collegare il mondo lambda al mondo express uso dei labmda layers","title":"strumenti\\librerie utilizzate"},{"location":"Serverless/esempio_besharp/#comandi-di-script","text":"\"scripts\": { \"generate-swagger\": \"./node_modules/tsoa/dist/cli.js swagger\", \"generate-routes\": \"./node_modules/tsoa/dist/cli.js routes\", \"build\": \"./node_modules/typescript/bin/tsc\", \"prebuild\": \"npm run generate-routes && ./node_modules/tslint/bin/tslint -c tslint.json -p tsconfig.json --fix && rm -rf dist/\", \"prestart\": \"npm install && npm run build\", \"start\": \"isLocal=true NODE_ENV=dev sls offline start\", \"pre-deploy\": \"rm -rf node_modules .serverless && npm install --production && npm run build && ./prepare-layer.sh\", \"deploy-dev\": \"npm run pre-deploy && NODE_ENV=dev sls deploy\", \"migrate-db-local\": \"NODE_ENV=local ./node_modules/sequelize-cli/lib/sequelize db:migrate\", \"migrate-db-dev\": \"NODE_ENV=dev ./node_modules/sequelize-cli/lib/sequelize db:migrate\" }, Interessante: - il build fa la compilazione del typescript in javascript. Prima per\u00f2 il prebuild fa diverse cose : - ./node_modules/tsoa/dist/cli.js routes - ./node_modules/tslint/bin/tslint -c tslint.json -p tsconfig.json --fix - rm -rf dist/ - lo start e prestart servono per fare il deploy in locale. - installazione dei pacchetti: npm install - step di build: npm run build - start del plugin sls offline: isLocal=true NODE_ENV=dev sls offline start - il pre-deploy e deploy-dev fanno invece il deploy su ambiente dev. Fondamente fanno: - clean = rm -rf node_modules .serverless - installazione dei pacchetti di produzione = npm install --production - step di build: npm run build - Preparazione del layer: ./prepare-layer.sh - deploy vero e proprio serverless: NODE_ENV=dev sls deploy Quindi secondo me, per fare il deploy. In locale: - docker-compose up - npm run migrate-db-local - npm run start PEr depolyare su ambiente dev: - npm run deploy-dev Poi per\u00f2 devo fare - npm run migrate-db-dev da una macchina (Bastion host??? ma non ho cpaito come pu\u00f2 funzionare... , sul bastion host mica c'\u00e8 quel codice...)","title":"comandi di script"},{"location":"Serverless/esempio_besharp/#tsoa","text":"tsoa , ovvero OpenAPI-compliant REST APIs using TypeScript and Node \u00e8 qui tsoa is a framework with integrated OpenAPI compiler to build Node.js serve-side applications using TypeScript. It can target express, hapi, koa and more frameworks at runtime. tsoa applications are type-safe by default and handle runtime validation seamlessly Fondamentalmente possiamo interpretare questo progetto di besharp come: - progetto di rest tsoa basato su express - che per lo storage dei dati usa postgress attraverso la libreria sequelize - invece che essere esposto come server a se stante usa serverless per essere deployato come lambda, e serverless-http come strumento per linkare il modello di invocazione delle lambda a quello di express - usa serverless-offline per permettere di fare i test in locale Nel progetto vengono usati questi due comandi rispettivamente per la generazione della codumentazione swagger ed il codice delle rotte: \"generate-swagger\": \"./node_modules/tsoa/dist/cli.js swagger\", \"generate-routes\": \"./node_modules/tsoa/dist/cli.js routes\", Mentre nella documentazione di tsoa vengono usati questi: # generate OAS tsoa spec # generate routes tsoa routes Forse loro usavano una versione un po' vecchia Approfondisco questo tema molto interessante qui","title":"tsoa"},{"location":"Serverless/esempio_besharp/#serverless-offline","text":"Qui il link . \u00c8 un plugin. This Serverless plugin emulates AWS \u03bb and API Gateway on your local machine to speed up your development cycles. To do so, it starts an HTTP server that handles the request's lifecycle like APIG does and invokes your handlers. Approfondisco qui","title":"serverless-offline"},{"location":"Serverless/esempio_besharp/#layers","text":"Usano questo approccio package: exclude: - node_modules/** - src/** layers: nodeModules: path: layer compatibleRuntimes: - nodejs12.x Cio\u00e8 tutte le dipendenze node le sposta nella directory layer .... Ma questo secondo me non \u00e8 il corretto uso prepare-layer.sh fa questo: mkdir -p layer/nodejs cp -r ./node_modules ./layer/nodejs cp package.json ./layer/nodejs NElla docuemntazione scrivono: Con questa configurazione, infatti, andremo a creare un Lambda Layer contenente tutti i node modules. Cos\u00ec facendo, alleggeriremo notevolmente le dimensioni della nostra funzione ottenendo vantaggi in performance durante la sua esecuzione. Quindi comq forse ha senso valutare... Sicoome \u00e8 stta fatta una lambda con express forse effettivamente \u00e8 un po' ciccia","title":"Layers"},{"location":"Serverless/esempio_besharp/#serverless-http","text":"This module allows you to 'wrap' your API for serverless use. No HTTP server, no ports or sockets. Just your code in the same execution pipeline you are already familiar with.","title":"serverless-http"},{"location":"Serverless/esempio_besharp/#aws-secret-manager","text":"Usa secret manager pee recuperare le credenziali di accesso al DB","title":"AWS Secret Manager"},{"location":"Serverless/esempio_besharp/#prova","text":"PRovo a vedere se effettivamente funziona e cosa bisogna cambiare Steps: 1 npm install 2 npm run build fallisce su pc per discorso di percorsi, ma funziona su mac. Continuo le prove su mac 3 docker-compose up 4 npm run migrate-db-local 5 npm run start (che poi in realt\u00e0 i primi 2 step) E funziona. Riesco a fare la chiamata con postman in locale ! (verificare se riesco anche a fare il debug locale!!!!) 6 npm run deploy-dev . Cio\u00e8, provo fare deploy su aws. Fa effettivamente un sacco di pasaggi come il caricamento dei zip sia per lambda che per i layer, ma poi fallisce perch\u00e8 nel file yaml \u00e8 specificato vpc esplicito Dopo aver corretto vpc e subnet, mettendo quelle del mio account sono effettivamente riuscito a fare il deploy. Qui i dettagli della lambda deployata. Effettivamente c'\u00e8 un layer, doe sono i node_modules (che non sono nl codice della lambda)","title":"PROVA"},{"location":"Serverless/lambda_layers/","text":"Leggo questo articolo AWS introduced Lambda Layers at re:invent 2018 as a way to share code and data between functions within and across different accounts. It\u2019s a useful tool and something many AWS customers have been asking for. However, since we already have numerous ways of sharing code, including package managers such as NPM, when should we use Layers instead? You can add up to five layers. The console will list layers in the current region of your AWS account, which are compatible with the function\u2019s runtime. New Challenges Harder to invoke functions locally. (Having dependencies that only exist in the execution environment makes it harder to execute functions locally. Your tools need to know how to fetch relevant layers from AWS and include them in the build process before executing the functions locally) Harder to test functions Harder to test functions Dealing with changes in the layer is not straightforward When you should use Lambda Layers In genere non \u00e8 necessario, perch\u00e8: - To share code between functions in the same project, use shared modules in the same repo. For example, I like to structure my projects so that shared modules are put inside a lib folder. Functions in this project can reference these shared modules directly since they are packaged and deployed together. - To share code between functions across projects, publish the shared code as libraries to package managers such as NPM. Where it makes sense, you can also wrap the shared code into a service. One reason for using layers is that it allows you to deploy large dependencies (such as FFmpeg and Pandoc) less frequently. By moving these dependencies into layers, you can drastically reduce the size of your deployment package for Lambda. Quindi in effetti non molto utili secondo me...","title":"Lambda layers"},{"location":"Serverless/lambda_layers/#new-challenges","text":"Harder to invoke functions locally. (Having dependencies that only exist in the execution environment makes it harder to execute functions locally. Your tools need to know how to fetch relevant layers from AWS and include them in the build process before executing the functions locally) Harder to test functions Harder to test functions Dealing with changes in the layer is not straightforward","title":"New Challenges"},{"location":"Serverless/lambda_layers/#when-you-should-use-lambda-layers","text":"In genere non \u00e8 necessario, perch\u00e8: - To share code between functions in the same project, use shared modules in the same repo. For example, I like to structure my projects so that shared modules are put inside a lib folder. Functions in this project can reference these shared modules directly since they are packaged and deployed together. - To share code between functions across projects, publish the shared code as libraries to package managers such as NPM. Where it makes sense, you can also wrap the shared code into a service. One reason for using layers is that it allows you to deploy large dependencies (such as FFmpeg and Pandoc) less frequently. By moving these dependencies into layers, you can drastically reduce the size of your deployment package for Lambda. Quindi in effetti non molto utili secondo me...","title":"When you should use Lambda Layers"},{"location":"Serverless/liveproject/","text":"Repo https://github.com/fabiux76/WhatsAppPush Creazione di progetto serverless serverless create --template aws-nodejs --path WhatsAppPush In realt\u00e0 esiste anche il template aws-nodejs-typescript . Vedi capitolo a parte per approfondimento su questo. L'approccio che ho preso in questo caso \u00e8 di trasformarlo da javascript Gestione dei parametri di configurazione e delle variabili d'ambiente Environment variable defined under the provider block is accessible in all lambda functions defined for WhatsAppPush. Check su tipi anche senza typescript Sembra si possa fare (su Visual studio code?= mettendo questo commento nel file // @ts-check cfr. here Transition to typescript Questo \u00e8 il commit che fa la transazione su typescript Passi: - Ho creato un tsconfig.json - Ho sostituito la dependency aws-sdk con @types/aws-lambda - Ho aggiuto queste devDependencies: json \"devDependencies\": { \"@types/hapi__joi\": \"^17.1.7\", \"@types/node\": \"^13.13.5\", \"@types/uuid\": \"^8.3.1\", \"aws-sdk\": \"^2.1013.0\" } - Nel serverless.yml riferosco la funzione nella cartella build - I file da .js diventano .ts ed annoto parametri, variabili Ma il build come lo faccio? Validazione della richiesta La validazione del body la facciamo con joi const schema = Joi.object({ template_name: Joi.string().required(), template_message: Joi.string().required() }); const { error, value } = schema.validate(requestBody); if (error) { return handleError(HttpStatus.BAD_REQUEST, `[Template:Create:Error]:${HttpStatus[HttpStatus.BAD_REQUEST]}:${error}`); } Comandi serverless I comandi possono prendere come opzioni: - --stage or -s The stage in your service you want to display information about. - --region or -r The region in your stage that you want to display information Deploy serverless deploy Verifica dello stato del servizio serverless info --verbose PEr\u00f2 anche nella modalit\u00e0 verbose non si vedono tutte le risorse che invee si vedono sulla console \u03bb serverless info --verbose Service Information service: whatsapppush stage: dev region: us-east-1 stack: whatsapppush-dev resources: 44 api keys: None endpoints: POST - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates PUT - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id}/{template_id} DELETE - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id}/{template_id} GET - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id}/{template_id} GET - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id} POST - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/upload-url/{user_id} POST - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/notification functions: CreateTemplates: whatsapppush-dev-CreateTemplates UpdateTemplates: whatsapppush-dev-UpdateTemplates DeleteTemplates: whatsapppush-dev-DeleteTemplates DetailsTemplates: whatsapppush-dev-DetailsTemplates ListTemplates: whatsapppush-dev-ListTemplates GetSignedUrl: whatsapppush-dev-GetSignedUrl CreateNotification: whatsapppush-dev-CreateNotification hello: whatsapppush-dev-hello layers: None Stack Outputs WhatsAppMessageQueueURL: https://sqs.us-east-1.amazonaws.com/955501240318/whatsapppush-message-queue-name ServiceEndpoint: https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev ServerlessDeploymentBucketName: whatsapppush-dev-serverlessdeploymentbucket-1hmecn30ikc28 Da console vedo questo: Cancellazione serverless remove Test locale Invocazione diretta delle funzioni Es: serverless invoke local --function CreateNotification --path test\\CreateNotificationPayloadSingle.json Compilazione Per trasformare da javascript a typescript, vado nella root del progetto (dove c'\u00e8 il tsconfig.json e faccio semplicemente: tsc Per capire meglio come gestire typescript con vscode \u00e8 sicuramente utile leggersi questo tutorial Debug Info qui: - VSCode doc Step 1: Sono riuscito a fare un primo passo. Debuggare sul codice javascript (non typescript). Per fare questo \u00e8 dovuto installare localmente al progetto serverless (non global) ed ho anche dovuto aggiornare la versione a 3 del serverless.yaml Poi usato creaa la launch configuration puntando program a ${workspaceRoot}/node_modules/serverless/bin/serverless.js Non ho ancora capito per\u00f2 dove va a mettere l'outpur (immagino che se chiamo serverless da cli mi stampa la risposta di default mentre cos\u00ec no) MA bisogna ancora fare tanto: - Dove trovo gli output? - C'\u00e8 per\u00f2 il problema di come debuggate typescript!!!!! - L'ideale sarebbe poter dire a serverless di usare direttamente typescript! Forse in questo caso si riesce a debuggare bene - Poi sarebbe interessante investigare anche come usare questo plugin: serverless offline Client Per testare il caricamento di file da client web mi ero fatto un progetto parallelo con react La faccio partire con npm start e funziona ancora :) Collezione Postman per le prove ... Dubbi Com'\u00e8 che facevo la build??? ts-node? poi serverless... Non ho capito l'uso dell'idempotentkey. Sostanzialmente \u00e8 una chiave usata epr evitare inserimenti duplici... Non si poteva usare un id di dynamo? ci sono diversi as any nella chiamata a dynamodb che non mi piacciono. Sicuramente si pu\u00f2 fare qualcosa...VERIFICARE Anche questo process.env.DDB_TEMPLATES_TABLE_NAME || \"\" va sistemato Sistemare anche getSignedUrlPromise parametro not typed Avevo fatto anche dei file di test .json. Come la facevo l'invocazione? con qualcosa tipo serverless invoke local --function functionName --path lib/data.json","title":"Liveproject"},{"location":"Serverless/liveproject/#repo","text":"https://github.com/fabiux76/WhatsAppPush","title":"Repo"},{"location":"Serverless/liveproject/#creazione-di-progetto-serverless","text":"serverless create --template aws-nodejs --path WhatsAppPush In realt\u00e0 esiste anche il template aws-nodejs-typescript . Vedi capitolo a parte per approfondimento su questo. L'approccio che ho preso in questo caso \u00e8 di trasformarlo da javascript","title":"Creazione di progetto serverless"},{"location":"Serverless/liveproject/#gestione-dei-parametri-di-configurazione-e-delle-variabili-dambiente","text":"Environment variable defined under the provider block is accessible in all lambda functions defined for WhatsAppPush.","title":"Gestione dei parametri di configurazione e delle variabili d'ambiente"},{"location":"Serverless/liveproject/#check-su-tipi-anche-senza-typescript","text":"Sembra si possa fare (su Visual studio code?= mettendo questo commento nel file // @ts-check cfr. here","title":"Check su tipi anche senza typescript"},{"location":"Serverless/liveproject/#transition-to-typescript","text":"Questo \u00e8 il commit che fa la transazione su typescript Passi: - Ho creato un tsconfig.json - Ho sostituito la dependency aws-sdk con @types/aws-lambda - Ho aggiuto queste devDependencies: json \"devDependencies\": { \"@types/hapi__joi\": \"^17.1.7\", \"@types/node\": \"^13.13.5\", \"@types/uuid\": \"^8.3.1\", \"aws-sdk\": \"^2.1013.0\" } - Nel serverless.yml riferosco la funzione nella cartella build - I file da .js diventano .ts ed annoto parametri, variabili Ma il build come lo faccio?","title":"Transition to typescript"},{"location":"Serverless/liveproject/#validazione-della-richiesta","text":"La validazione del body la facciamo con joi const schema = Joi.object({ template_name: Joi.string().required(), template_message: Joi.string().required() }); const { error, value } = schema.validate(requestBody); if (error) { return handleError(HttpStatus.BAD_REQUEST, `[Template:Create:Error]:${HttpStatus[HttpStatus.BAD_REQUEST]}:${error}`); }","title":"Validazione della richiesta"},{"location":"Serverless/liveproject/#comandi-serverless","text":"I comandi possono prendere come opzioni: - --stage or -s The stage in your service you want to display information about. - --region or -r The region in your stage that you want to display information","title":"Comandi serverless"},{"location":"Serverless/liveproject/#deploy","text":"serverless deploy","title":"Deploy"},{"location":"Serverless/liveproject/#verifica-dello-stato-del-servizio","text":"serverless info --verbose PEr\u00f2 anche nella modalit\u00e0 verbose non si vedono tutte le risorse che invee si vedono sulla console \u03bb serverless info --verbose Service Information service: whatsapppush stage: dev region: us-east-1 stack: whatsapppush-dev resources: 44 api keys: None endpoints: POST - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates PUT - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id}/{template_id} DELETE - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id}/{template_id} GET - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id}/{template_id} GET - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/templates/{user_id} POST - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/upload-url/{user_id} POST - https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev/notification functions: CreateTemplates: whatsapppush-dev-CreateTemplates UpdateTemplates: whatsapppush-dev-UpdateTemplates DeleteTemplates: whatsapppush-dev-DeleteTemplates DetailsTemplates: whatsapppush-dev-DetailsTemplates ListTemplates: whatsapppush-dev-ListTemplates GetSignedUrl: whatsapppush-dev-GetSignedUrl CreateNotification: whatsapppush-dev-CreateNotification hello: whatsapppush-dev-hello layers: None Stack Outputs WhatsAppMessageQueueURL: https://sqs.us-east-1.amazonaws.com/955501240318/whatsapppush-message-queue-name ServiceEndpoint: https://cfjss7amu8.execute-api.us-east-1.amazonaws.com/dev ServerlessDeploymentBucketName: whatsapppush-dev-serverlessdeploymentbucket-1hmecn30ikc28 Da console vedo questo:","title":"Verifica dello stato del servizio"},{"location":"Serverless/liveproject/#cancellazione","text":"serverless remove","title":"Cancellazione"},{"location":"Serverless/liveproject/#test-locale","text":"","title":"Test locale"},{"location":"Serverless/liveproject/#invocazione-diretta-delle-funzioni","text":"Es: serverless invoke local --function CreateNotification --path test\\CreateNotificationPayloadSingle.json","title":"Invocazione diretta delle funzioni"},{"location":"Serverless/liveproject/#compilazione","text":"Per trasformare da javascript a typescript, vado nella root del progetto (dove c'\u00e8 il tsconfig.json e faccio semplicemente: tsc Per capire meglio come gestire typescript con vscode \u00e8 sicuramente utile leggersi questo tutorial","title":"Compilazione"},{"location":"Serverless/liveproject/#debug","text":"Info qui: - VSCode doc Step 1: Sono riuscito a fare un primo passo. Debuggare sul codice javascript (non typescript). Per fare questo \u00e8 dovuto installare localmente al progetto serverless (non global) ed ho anche dovuto aggiornare la versione a 3 del serverless.yaml Poi usato creaa la launch configuration puntando program a ${workspaceRoot}/node_modules/serverless/bin/serverless.js Non ho ancora capito per\u00f2 dove va a mettere l'outpur (immagino che se chiamo serverless da cli mi stampa la risposta di default mentre cos\u00ec no) MA bisogna ancora fare tanto: - Dove trovo gli output? - C'\u00e8 per\u00f2 il problema di come debuggate typescript!!!!! - L'ideale sarebbe poter dire a serverless di usare direttamente typescript! Forse in questo caso si riesce a debuggare bene - Poi sarebbe interessante investigare anche come usare questo plugin: serverless offline","title":"Debug"},{"location":"Serverless/liveproject/#client","text":"Per testare il caricamento di file da client web mi ero fatto un progetto parallelo con react La faccio partire con npm start e funziona ancora :)","title":"Client"},{"location":"Serverless/liveproject/#collezione-postman-per-le-prove","text":"...","title":"Collezione Postman per le prove"},{"location":"Serverless/liveproject/#dubbi","text":"Com'\u00e8 che facevo la build??? ts-node? poi serverless... Non ho capito l'uso dell'idempotentkey. Sostanzialmente \u00e8 una chiave usata epr evitare inserimenti duplici... Non si poteva usare un id di dynamo? ci sono diversi as any nella chiamata a dynamodb che non mi piacciono. Sicuramente si pu\u00f2 fare qualcosa...VERIFICARE Anche questo process.env.DDB_TEMPLATES_TABLE_NAME || \"\" va sistemato Sistemare anche getSignedUrlPromise parametro not typed Avevo fatto anche dei file di test .json. Come la facevo l'invocazione? con qualcosa tipo serverless invoke local --function functionName --path lib/data.json","title":"Dubbi"},{"location":"Serverless/secrets/","text":"Mi leggo questo blog sul sito serverless 3 possibili approcci AWS SSM parameters Questo \u00e8 AWS Systems Manager che \u00e8 diverso da AWS Secrets Manager che \u00e8 il secondo approccio. Di quello il parameter store Questi funzionano: aws ssm get-parameters-by-path --region us-east-1 --path \"/\" aws ssm get-parameters --region us-east-1 --name \"fabio\" aws ssm get-parameters --region us-east-1 --name \"/fabio\" AWS Secrets Manager (non provato) Serverless Framework secrets (non provato)","title":"Secrets"},{"location":"Serverless/secrets/#aws-ssm-parameters","text":"Questo \u00e8 AWS Systems Manager che \u00e8 diverso da AWS Secrets Manager che \u00e8 il secondo approccio. Di quello il parameter store Questi funzionano: aws ssm get-parameters-by-path --region us-east-1 --path \"/\" aws ssm get-parameters --region us-east-1 --name \"fabio\" aws ssm get-parameters --region us-east-1 --name \"/fabio\"","title":"AWS SSM parameters"},{"location":"Serverless/secrets/#aws-secrets-manager","text":"(non provato)","title":"AWS Secrets Manager"},{"location":"Serverless/secrets/#serverless-framework-secrets","text":"(non provato)","title":"Serverless Framework secrets"},{"location":"Serverless/serverless-offline/","text":"Qui la documentazione Installazione ed uso Facilissimo: 1 npm install serverless-offline --save-dev 2 Then inside your project's serverless.yml file add following entry to the plugins section: serverless-offline. If there is no plugin section you will need to add it to the file. plugins: - serverless-offline 3 Run with serverless offline or sls offline . Ci sono un sacco di opzioni (per vederle sls offline --help ) che possono essere aggiunte al comando cli, oppure nel serverless.yml Per invocarla poi da cli: aws lambda invoke /dev/null \\ --endpoint-url http://localhost:3002 \\ --function-name myServiceName-dev-invokedHandler Anche se non ho capito a cosa server... Se voglio invocare la lambda in locale (senza gateway) posso pur sempre usare serverless invoke local , no?) Debug Sarebbe interessante capire se effettivamente riesco a fare debug come spiegato, perch\u00e8 con serverless invoke local ci ero riuscito... MA SI E' uguale, ma devo aggiungere qualche parametro. Qui \u00e8 spiegato tutto perfettamente!!!! Guardare anche il video youtube !!! In realt\u00f2 questo \u00e8 molto incetrnato su serverless dynamodb local Per il debug quello da guardare \u00e8 questo","title":"Serverless offline"},{"location":"Serverless/serverless-offline/#installazione-ed-uso","text":"Facilissimo: 1 npm install serverless-offline --save-dev 2 Then inside your project's serverless.yml file add following entry to the plugins section: serverless-offline. If there is no plugin section you will need to add it to the file. plugins: - serverless-offline 3 Run with serverless offline or sls offline . Ci sono un sacco di opzioni (per vederle sls offline --help ) che possono essere aggiunte al comando cli, oppure nel serverless.yml Per invocarla poi da cli: aws lambda invoke /dev/null \\ --endpoint-url http://localhost:3002 \\ --function-name myServiceName-dev-invokedHandler Anche se non ho capito a cosa server... Se voglio invocare la lambda in locale (senza gateway) posso pur sempre usare serverless invoke local , no?)","title":"Installazione ed uso"},{"location":"Serverless/serverless-offline/#debug","text":"Sarebbe interessante capire se effettivamente riesco a fare debug come spiegato, perch\u00e8 con serverless invoke local ci ero riuscito... MA SI E' uguale, ma devo aggiungere qualche parametro. Qui \u00e8 spiegato tutto perfettamente!!!! Guardare anche il video youtube !!! In realt\u00f2 questo \u00e8 molto incetrnato su serverless dynamodb local Per il debug quello da guardare \u00e8 questo","title":"Debug"},{"location":"Serverless/serverless-plugin-typescript/","text":"","title":"Serverless plugin typescript"},{"location":"Serverless/typescript%20template/","text":"Intro In realt\u00e0 esiste anche il template aws-nodejs-typescript Avevo provato ad usarlo ed avevo visto che tra le altre cose generava anche il serverless.ts , qundi non pi\u00f9 yaml Potrebbe essere interessante approfondire. Non sono mai riuscito a farlo andare, dopo aver fatto npm install se faccio serverless deploy mi da questo errore: \u03bb serverless deploy Serverless: Running \"serverless\" installed locally (in service node_modules) Error --------------------------------------------------- Error: Cannot find module 'esbuild' Require stack: - c:\\projects\\Manning\\LiveProjects\\HelloWorldTS\\node_modules\\serverless-esbuild\\dist\\index.js - c:\\projects\\Manning\\LiveProjects\\HelloWorldTS\\node_modules\\serverless\\lib\\classes\\PluginManager.js ... Peccato che questo link non \u00e8 pi\u00f9 funzionante. C'\u00e8 quest'altra risorsa che per\u00f2 forse pu\u00f2 aiutarci a capire come funziona e le librerie che vengono usate","title":"Typescript Template"},{"location":"Serverless/typescript%20template/#intro","text":"In realt\u00e0 esiste anche il template aws-nodejs-typescript Avevo provato ad usarlo ed avevo visto che tra le altre cose generava anche il serverless.ts , qundi non pi\u00f9 yaml Potrebbe essere interessante approfondire. Non sono mai riuscito a farlo andare, dopo aver fatto npm install se faccio serverless deploy mi da questo errore: \u03bb serverless deploy Serverless: Running \"serverless\" installed locally (in service node_modules) Error --------------------------------------------------- Error: Cannot find module 'esbuild' Require stack: - c:\\projects\\Manning\\LiveProjects\\HelloWorldTS\\node_modules\\serverless-esbuild\\dist\\index.js - c:\\projects\\Manning\\LiveProjects\\HelloWorldTS\\node_modules\\serverless\\lib\\classes\\PluginManager.js ... Peccato che questo link non \u00e8 pi\u00f9 funzionante. C'\u00e8 quest'altra risorsa che per\u00f2 forse pu\u00f2 aiutarci a capire come funziona e le librerie che vengono usate","title":"Intro"},{"location":"Serverless/visual-studio-code-extensions/","text":"Viste da Questo video AWS Toolkit Serverless Console Principalmente per vedere i log Serverless IDE Supporto per editare i file SAM, Cloudformation e Serverless","title":"Visual studio code extensions"},{"location":"Serverless/visual-studio-code-extensions/#aws-toolkit","text":"","title":"AWS Toolkit"},{"location":"Serverless/visual-studio-code-extensions/#serverless-console","text":"Principalmente per vedere i log","title":"Serverless Console"},{"location":"Serverless/visual-studio-code-extensions/#serverless-ide","text":"Supporto per editare i file SAM, Cloudformation e Serverless","title":"Serverless IDE"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/","text":"Questa \u00e8 la playlisti di 52 video Qui metto le info, i punti pi\u00f9 significativi da ricordare 1) Setting UP the Serverless Framework with AWS - Configure AWS Credentials Niente di nuovo. - Creare utente with programmatic access and administration rights - Install serverless: npm install -g serverless - Setup credentials serverless config credentials --provider aws -- key <ID> --secret <SECRET> -- profile servelessUser Immagino questo comando abbia creato il profilo direttamente nel .aws config files 2) Creating a new Serverless Project and deploying a Lambda serverless create --template aws-nodejs -path myServerlessProject Questo ha creato handler.js e serverless.yaml add profile to provider section serverless deploy Cose da ricordare, anche se non vengono dette I comandi serverless possono prendere come opzioni: - --stage or -s The stage in your service you want to display information about. - --region or -r The region in your stage that you want to display information Come funziona il discorso degli stage (spiegato anche qui ) Perch\u00e8 poi il discorso si intreccia anche con gli stage di Api Gateway. In realt\u00e0, come \u00e8 spiegato in quell'articilo, Serverless usa separate API for each stage (cio\u00e8 non usa il meccanismo di staging di API Gateway) As mentioned above, a new stage is a new API Gateway project. To deploy to a specific stage, you can either specify the stage in the serverless.yml. service: service-name provider: name: aws stage: dev Or you can specify the stage by passing the --stage option to the serverless deploy command. serverless deploy --stage dev Se stage non viene specificato secondo me il default \u00e8 dev Non ho poi capito se in realt\u00e0 l'override di stage da cli rispetto a quello nel file \u00e8 automatico o no, perch\u00e8 ad esempio spesso c'\u00e8 qualcosa di questo tipo custom: myStage: ${opt:stage, self:provider.stage} This is telling Serverless Framework to use the --stage CLI option if it exists. And if it does not, then use the default stage specified by provider.stage E molto spesso viene usata questa modalit\u00e0 per gestire la cosa. Anche alcune risorse che vengono create poi presentano il valore di stage in parte del nome (per esempio questo succede per le funzioni, ma non ad esempio per i nomi dei bucket) 3) How to Deploy an S3 bucket and Upload Data Aggiungere le risorse resources: Resources: DemoBucketUpload: Type: AWS::S3::Bucket Properties: BucketName: UniqueBucketName Di nuovo sls deploy In questo caso il nome del bucket sar\u00e0 proprio solo UniqueBucketName senza riferimento allo stage Aggiugna il plugin serverless-s3-sync Questo server per sincronizzare il contentuo di un file locale dentro il bucket plugins: - serverless-s3-sync custom: s3Sync: - bucketName: UniqueBucketName localDir: UploadData Ora quando faccio sls-deploy far\u00e0 anche la sincronizzazione del bucket 4) Creating an API with Serverless Niente di nuovo. - Fa una lamda. Interessante il moldulono che scrive per gestire le risposte (con header, cors, stringify) - Aggiunge evento http 5) Adding Serverless Webpack to your Project Obiettivo: deployare solo il codice che ci serve Aggiungo serverless.webpack plugin package: individually: true npm install --sabe serverless-webpack npm install --save webpack Aggiungere webpack.config.js javascript module.exports = { target: 'node', mode: 'production' } sls deploy ora usa webpack per comprimere i sorgenti Se non vogliamo il minifier, pasta cambiare mode: 'node' . In questo modo abbiamo cmq solo il codice della funzione, ma non compressa cambiando i nomi delle variabile, ecc... 6) Create a Serverless Database - DynamoDB with the Serverless Framework Aggiungere la risorsa resources: Resources: MyDinamoTable: Type: AWS::DynamoDB::Table Properties: TableName: ${self.custom.tableName} AttributeDefinitions: - AttributeName: ID AttributeType: S KeySchema: - AttributeName: ID KeyType: HASH BillingMode: PAY_PER_REQUEST PAY_PER_REQUEST \u00e8 una scelta che ha fatto lui, non \u00e8 detto che sia la migliore in tutti i contesti Per il nome della tabella custom: tableName: player-points","title":"The serverless framework with aws"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#1-setting-up-the-serverless-framework-with-aws-configure-aws-credentials","text":"Niente di nuovo. - Creare utente with programmatic access and administration rights - Install serverless: npm install -g serverless - Setup credentials serverless config credentials --provider aws -- key <ID> --secret <SECRET> -- profile servelessUser Immagino questo comando abbia creato il profilo direttamente nel .aws config files","title":"1) Setting UP the Serverless Framework with AWS - Configure AWS Credentials"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#2-creating-a-new-serverless-project-and-deploying-a-lambda","text":"serverless create --template aws-nodejs -path myServerlessProject Questo ha creato handler.js e serverless.yaml add profile to provider section serverless deploy","title":"2) Creating a new Serverless Project and deploying a Lambda"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#cose-da-ricordare-anche-se-non-vengono-dette","text":"I comandi serverless possono prendere come opzioni: - --stage or -s The stage in your service you want to display information about. - --region or -r The region in your stage that you want to display information Come funziona il discorso degli stage (spiegato anche qui ) Perch\u00e8 poi il discorso si intreccia anche con gli stage di Api Gateway. In realt\u00e0, come \u00e8 spiegato in quell'articilo, Serverless usa separate API for each stage (cio\u00e8 non usa il meccanismo di staging di API Gateway) As mentioned above, a new stage is a new API Gateway project. To deploy to a specific stage, you can either specify the stage in the serverless.yml. service: service-name provider: name: aws stage: dev Or you can specify the stage by passing the --stage option to the serverless deploy command. serverless deploy --stage dev Se stage non viene specificato secondo me il default \u00e8 dev Non ho poi capito se in realt\u00e0 l'override di stage da cli rispetto a quello nel file \u00e8 automatico o no, perch\u00e8 ad esempio spesso c'\u00e8 qualcosa di questo tipo custom: myStage: ${opt:stage, self:provider.stage} This is telling Serverless Framework to use the --stage CLI option if it exists. And if it does not, then use the default stage specified by provider.stage E molto spesso viene usata questa modalit\u00e0 per gestire la cosa. Anche alcune risorse che vengono create poi presentano il valore di stage in parte del nome (per esempio questo succede per le funzioni, ma non ad esempio per i nomi dei bucket)","title":"Cose da ricordare, anche se non vengono dette"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#3-how-to-deploy-an-s3-bucket-and-upload-data","text":"Aggiungere le risorse resources: Resources: DemoBucketUpload: Type: AWS::S3::Bucket Properties: BucketName: UniqueBucketName Di nuovo sls deploy In questo caso il nome del bucket sar\u00e0 proprio solo UniqueBucketName senza riferimento allo stage Aggiugna il plugin serverless-s3-sync Questo server per sincronizzare il contentuo di un file locale dentro il bucket plugins: - serverless-s3-sync custom: s3Sync: - bucketName: UniqueBucketName localDir: UploadData Ora quando faccio sls-deploy far\u00e0 anche la sincronizzazione del bucket","title":"3) How to Deploy an S3 bucket and Upload Data"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#4-creating-an-api-with-serverless","text":"Niente di nuovo. - Fa una lamda. Interessante il moldulono che scrive per gestire le risposte (con header, cors, stringify) - Aggiunge evento http","title":"4) Creating an API with Serverless"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#5-adding-serverless-webpack-to-your-project","text":"Obiettivo: deployare solo il codice che ci serve Aggiungo serverless.webpack plugin package: individually: true npm install --sabe serverless-webpack npm install --save webpack Aggiungere webpack.config.js javascript module.exports = { target: 'node', mode: 'production' } sls deploy ora usa webpack per comprimere i sorgenti Se non vogliamo il minifier, pasta cambiare mode: 'node' . In questo modo abbiamo cmq solo il codice della funzione, ma non compressa cambiando i nomi delle variabile, ecc...","title":"5) Adding Serverless Webpack to your Project"},{"location":"Serverless/CompleteCodingYoutube/the_serverless_framework_with_aws/#6-create-a-serverless-database-dynamodb-with-the-serverless-framework","text":"Aggiungere la risorsa resources: Resources: MyDinamoTable: Type: AWS::DynamoDB::Table Properties: TableName: ${self.custom.tableName} AttributeDefinitions: - AttributeName: ID AttributeType: S KeySchema: - AttributeName: ID KeyType: HASH BillingMode: PAY_PER_REQUEST PAY_PER_REQUEST \u00e8 una scelta che ha fatto lui, non \u00e8 detto che sia la migliore in tutti i contesti Per il nome della tabella custom: tableName: player-points","title":"6) Create a Serverless Database - DynamoDB with the Serverless Framework"},{"location":"Typescript/create_a_cli/","text":"Seguo questo articolo https://itnext.io/how-to-create-your-own-typescript-cli-with-node-js-1faf7095ef89 In realt\u00e0 alla base di tutto c'\u00e8 questo: https://www.npmjs.com/package/commander Cmq in realt\u00e0 \u00e8 molto carini il primo link, permette proprio di isntallare il comand globalmente con npm (ci\u00e8 la parte bin nel package.json ) e poi lo ritrovo tra i comandi (posso fare da shell semplicemente sssusers ) e lo me lo ritrovo anche nei packages: npm list -g --depth=0 +-- @aws-amplify/cli@6.3.1 +-- UNMET PEER DEPENDENCY @types/node@* +-- serverless@3.10.0 +-- sssusers@1.0.0 -> C:\\projects\\SSSUsers +-- ts-node@10.4.0 `-- typescript@4.4.4 Domande 1 Come faccio a fare Shebang per windows? Cio\u00e8 fare un executable da un file?","title":"Create a cli"},{"location":"Typescript/tsoa/","text":"Introduzione tsoa , ovvero OpenAPI-compliant REST APIs using TypeScript and Node \u00e8 qui tsoa is a framework with integrated OpenAPI compiler to build Node.js serve-side applications using TypeScript. It can target express, hapi, koa and more frameworks at runtime. tsoa applications are type-safe by default and handle runtime validation seamlessly INTERESSANTISSIMO. CONITNUARE l'ESPLORAZIONE DELLA DOCUMENTAZIONE E FARE PROGETTO","title":"Introduzione"},{"location":"Typescript/tsoa/#introduzione","text":"tsoa , ovvero OpenAPI-compliant REST APIs using TypeScript and Node \u00e8 qui tsoa is a framework with integrated OpenAPI compiler to build Node.js serve-side applications using TypeScript. It can target express, hapi, koa and more frameworks at runtime. tsoa applications are type-safe by default and handle runtime validation seamlessly INTERESSANTISSIMO. CONITNUARE l'ESPLORAZIONE DELLA DOCUMENTAZIONE E FARE PROGETTO","title":"Introduzione"},{"location":"Typescript/typescript/","text":"Code Editor Setup From O'Reilly Programming TypeScript TSC is a command-line application written in TypeScript. This is the compiler TSCLint this is a linter Setup inside existing npm project npm intall --save-dev typescript tslint @types/node Configuration tsconfig.json File tsconfig.json da creare nella root del progetto ( touch tsconfig.json ) Tra i parametri principali: include : dir con sorgenty ts lib : es [\"es2015\"] module : specifica il module system da usare, es commonjs outDir strict target : \"es2015\" Nota: si pu\u00f2 creare un file tsconfig.json semplicemente con il comando tsc --init tslint.json Configurazione stylistic conventions (es tab vs spaces, trailing commas, etc) Run Basic Sicuramente non l'approccio migliore (poi vedremo modi migliori) ma nel libro fa due passaggi ./node_modules/.bin/tsc node ./dist/index.js Shortcuts ts-node Use it to compile and run your typescript with a single command typescript-node-starter Skaffolding tool Tools Sia comandi e plugin di Visual Studio Code ad esempio Doubts\\Questions Debugging using typescript types Non c'era un modo per creare un tsconfig.json di default?","title":"General"},{"location":"Typescript/typescript/#code-editor-setup","text":"From O'Reilly Programming TypeScript TSC is a command-line application written in TypeScript. This is the compiler TSCLint this is a linter","title":"Code Editor Setup"},{"location":"Typescript/typescript/#setup-inside-existing-npm-project","text":"npm intall --save-dev typescript tslint @types/node","title":"Setup inside existing npm project"},{"location":"Typescript/typescript/#configuration","text":"","title":"Configuration"},{"location":"Typescript/typescript/#tsconfigjson","text":"File tsconfig.json da creare nella root del progetto ( touch tsconfig.json ) Tra i parametri principali: include : dir con sorgenty ts lib : es [\"es2015\"] module : specifica il module system da usare, es commonjs outDir strict target : \"es2015\" Nota: si pu\u00f2 creare un file tsconfig.json semplicemente con il comando tsc --init","title":"tsconfig.json"},{"location":"Typescript/typescript/#tslintjson","text":"Configurazione stylistic conventions (es tab vs spaces, trailing commas, etc)","title":"tslint.json"},{"location":"Typescript/typescript/#run","text":"","title":"Run"},{"location":"Typescript/typescript/#basic","text":"Sicuramente non l'approccio migliore (poi vedremo modi migliori) ma nel libro fa due passaggi ./node_modules/.bin/tsc node ./dist/index.js","title":"Basic"},{"location":"Typescript/typescript/#shortcuts","text":"","title":"Shortcuts"},{"location":"Typescript/typescript/#ts-node","text":"Use it to compile and run your typescript with a single command","title":"ts-node"},{"location":"Typescript/typescript/#typescript-node-starter","text":"Skaffolding tool","title":"typescript-node-starter"},{"location":"Typescript/typescript/#tools","text":"Sia comandi e plugin di Visual Studio Code ad esempio","title":"Tools"},{"location":"Typescript/typescript/#doubtsquestions","text":"Debugging using typescript types Non c'era un modo per creare un tsconfig.json di default?","title":"Doubts\\Questions"},{"location":"Typescript/typescript_lambda/","text":"","title":"Typescript lambda"},{"location":"Typescript/typescript_nodejs/","text":"","title":"Typescript nodejs"},{"location":"Typescript/typescript_visualstudio/","text":"Faccio riferimento a questo documento TypeScript tutorial in Visual Studio Code Visual Studio Code includes TypeScript language support but does not include the TypeScript compiler, tsc . You will need to install the TypeScript compiler either globally or in your workspace to transpile TypeScript source code to JavaScript ( tsc HelloWorld.ts ). Quindi nell'esempio poi lo installa globalmente: npm install -g typescript Another option is to install the TypeScript compiler locally in your project ( npm install --save-dev typescript ) and has the benefit of avoiding possible interactions with other TypeScript projects you may have. Debugging VS Code has built-in support for TypeScript debugging. To support debugging TypeScript in combination with the executing JavaScript code, VS Code relies on source maps for the debugger to map between the original TypeScript source code and the running JavaScript. You can create source maps during the build by setting \"sourceMap\": true in your tsconfig.json. E cos\u00ec facendo, senza nemmeno fare un launch.json file, con il file .ts che volgio debuggare aperto, posso farlo! Qua cominciamo a guardare questa pagina pi\u00f9 di dettaglio su Compiling Compiler vs language service (!) It is important to keep in mind that VS Code's TypeScript language service is separate from your installed TypeScript compiler. You can see the VS Code's TypeScript version in the Status Bar when you open a TypeScript file. Transpile TypeScript into JavaScript Praticamente visua studio permette di fare la traspilazione in watch! (senza ts-node) Execute Run Build Task (Ctrl+Shift+B) from the global Terminal menu. If you created a tsconfig.json file in the earlier section, this should present the following picker: Tooop > Executing task: tsc -p c:\\projects\\typescript\\HelloWorld\\tsconfig.json --watch < [19:16:25] Starting compilation in watch mode... [19:16:25] Found 0 errors. Watching for file changes. Poi manca da esplorare in dettaglio typescript-debugging","title":"Typescript visualstudio"},{"location":"Typescript/typescript_visualstudio/#debugging","text":"VS Code has built-in support for TypeScript debugging. To support debugging TypeScript in combination with the executing JavaScript code, VS Code relies on source maps for the debugger to map between the original TypeScript source code and the running JavaScript. You can create source maps during the build by setting \"sourceMap\": true in your tsconfig.json. E cos\u00ec facendo, senza nemmeno fare un launch.json file, con il file .ts che volgio debuggare aperto, posso farlo! Qua cominciamo a guardare questa pagina pi\u00f9 di dettaglio su Compiling","title":"Debugging"},{"location":"Typescript/typescript_visualstudio/#compiler-vs-language-service","text":"It is important to keep in mind that VS Code's TypeScript language service is separate from your installed TypeScript compiler. You can see the VS Code's TypeScript version in the Status Bar when you open a TypeScript file.","title":"Compiler vs language service (!)"},{"location":"Typescript/typescript_visualstudio/#transpile-typescript-into-javascript","text":"Praticamente visua studio permette di fare la traspilazione in watch! (senza ts-node) Execute Run Build Task (Ctrl+Shift+B) from the global Terminal menu. If you created a tsconfig.json file in the earlier section, this should present the following picker: Tooop > Executing task: tsc -p c:\\projects\\typescript\\HelloWorld\\tsconfig.json --watch < [19:16:25] Starting compilation in watch mode... [19:16:25] Found 0 errors. Watching for file changes. Poi manca da esplorare in dettaglio typescript-debugging","title":"Transpile TypeScript into JavaScript"},{"location":"Typescript/usecases/","text":"Usecases Per esempio qui riportare come Grider ha fatto Publisher e Listener","title":"UseCases"},{"location":"Typescript/usecases/#usecases","text":"Per esempio qui riportare come Grider ha fatto Publisher e Listener","title":"Usecases"}]}